"""
M√≥dulo para an√°lise explorat√≥ria dos dados de viabilidade de causas.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√£o para visualiza√ß√µes
plt.style.use('default')
sns.set_palette("husl")


class ViabilidadeCausasAnalyzer:
    """
    Analisador de viabilidade de causas para escrit√≥rios de advocacia
    Etapa 1: An√°lise explorat√≥ria e defini√ß√£o do problema
    """

    def __init__(self, df_sindec_com_valores):
        self.df = df_sindec_com_valores.copy()
        self.criterios_viabilidade = {}

    def definir_problema(self):
        """
        Define claramente o problema de machine learning
        """
        print("=" * 80)
        print("üéØ DEFINI√á√ÉO DO PROBLEMA DE MACHINE LEARNING")
        print("=" * 80)

        problema = """
        üìã PROBLEMA: Classifica√ß√£o de Viabilidade de Causas

        üéØ OBJETIVO:
        Criar um modelo que, dado DescricaoAssunto e DescricaoProblema de uma nova causa,
        classifique se ela √© VI√ÅVEL ou N√ÉO VI√ÅVEL financeiramente para o escrit√≥rio.

        üìä INPUTS (Features):
        - DescricaoAssunto (texto)
        - DescricaoProblema (texto)
        - Possivelmente: UF, Regiao, FaixaEtariaConsumidor, etc.

        üéØ OUTPUT (Target):
        - VI√ÅVEL: Vale a pena aceitar a causa
        - N√ÉO VI√ÅVEL: N√£o vale a pena aceitar a causa

        üí° CRIT√âRIOS DE VIABILIDADE (a serem definidos):
        - Valor da causa (ValorCausa)
        - Taxa de sucesso hist√≥rica (Atendida = 'S')
        - Complexidade da causa
        - Tempo de resolu√ß√£o
        - Regi√£o/UF (alguns locais podem ser mais favor√°veis)

        üìà TIPO: Problema de Classifica√ß√£o Bin√°ria
        üìö ALGORITMOS: Random Forest, XGBoost, SVM, Neural Networks
        """

        print(problema)
        return problema

    def an√°lise_explorat√≥ria_b√°sica(self):
        """
        Realiza an√°lise explorat√≥ria dos dados
        """
        print("\n" + "=" * 80)
        print("üìä AN√ÅLISE EXPLORAT√ìRIA DOS DADOS")
        print("=" * 80)

        # Informa√ß√µes b√°sicas
        print(f"üìã INFORMA√á√ïES B√ÅSICAS:")
        print(f"Total de registros: {len(self.df):,}")
        print(f"Total de colunas: {self.df.shape[1]}")
        print(f"Per√≠odo: {self.df['AnoCalendario'].unique()}")

        # Campos principais
        print(f"\nüîç CAMPOS PRINCIPAIS:")
        print(f"Assuntos √∫nicos: {self.df['DescricaoAssunto'].nunique()}")
        print(f"Problemas √∫nicos: {self.df['DescricaoProblema'].nunique()}")
        print(f"UFs: {self.df['UF'].nunique()}")
        print(f"Regi√µes: {self.df['Regiao'].nunique()}")

        # Distribui√ß√£o da vari√°vel "Atendida" (proxy para sucesso)
        print(f"\nüìà DISTRIBUI√á√ÉO DE ATENDIMENTO:")
        atendidas = self.df['Atendida'].value_counts()
        print(atendidas)
        print(f"Taxa de sucesso: {atendidas.get('S', 0) / len(self.df) * 100:.1f}%")

        # Estat√≠sticas dos valores
        print(f"\nüí∞ ESTAT√çSTICAS DOS VALORES:")
        valores_stats = self.df['ValorCausa'].describe()
        print(valores_stats)

        return {
            'total_registros': len(self.df),
            'assuntos_unicos': self.df['DescricaoAssunto'].nunique(),
            'problemas_unicos': self.df['DescricaoProblema'].nunique(),
            'taxa_sucesso': atendidas.get('S', 0) / len(self.df),
            'valor_medio': self.df['ValorCausa'].mean(),
            'valor_mediano': self.df['ValorCausa'].median()
        }

    def analisar_padr√µes_por_assunto(self, top_n=15):
        """
        Analisa padr√µes por tipo de assunto
        """
        print("\n" + "=" * 80)
        print("üîç AN√ÅLISE POR TIPO DE ASSUNTO")
        print("=" * 80)

        # Agrupamento por assunto
        analise_assunto = self.df.groupby('DescricaoAssunto').agg({
            'ValorCausa': ['count', 'mean', 'median'],
            'Atendida': lambda x: (x == 'S').sum(),  # Casos resolvidos
            'ValorCausaConfianca': 'mean'
        }).round(2)

        # Flatten column names
        analise_assunto.columns = ['Quantidade', 'Valor_Medio', 'Valor_Mediano',
                                  'Casos_Resolvidos', 'Confianca_Media']

        # Calcula taxa de sucesso
        analise_assunto['Taxa_Sucesso'] = (
            analise_assunto['Casos_Resolvidos'] / analise_assunto['Quantidade'] * 100
        ).round(1)

        # Calcula potencial financeiro (valor m√©dio * taxa sucesso)
        analise_assunto['Potencial_Financeiro'] = (
            analise_assunto['Valor_Medio'] * analise_assunto['Taxa_Sucesso'] / 100
        ).round(2)

        # Filtra apenas assuntos com volume razo√°vel
        analise_assunto = analise_assunto[analise_assunto['Quantidade'] >= 10]

        # Ordena por potencial financeiro
        analise_assunto = analise_assunto.sort_values('Potencial_Financeiro', ascending=False)

        print(f"üèÜ TOP {top_n} ASSUNTOS POR POTENCIAL FINANCEIRO:")
        print("-" * 120)

        for i, (assunto, dados) in enumerate(analise_assunto.head(top_n).iterrows(), 1):
            print(f"\n{i:2d}. {assunto[:60]}...")
            print(f"    üìä Quantidade: {dados['Quantidade']:,}")
            print(f"    üí∞ Valor m√©dio: R$ {dados['Valor_Medio']:,.2f}")
            print(f"    ‚úÖ Taxa sucesso: {dados['Taxa_Sucesso']:.1f}%")
            print(f"    üéØ Potencial: R$ {dados['Potencial_Financeiro']:,.2f}")
            print(f"    üîí Confian√ßa: {dados['Confianca_Media']:.2f}")

        return analise_assunto

    def analisar_padr√µes_por_problema(self, top_n=15):
        """
        Analisa padr√µes por tipo de problema
        """
        print("\n" + "=" * 80)
        print("üîç AN√ÅLISE POR TIPO DE PROBLEMA")
        print("=" * 80)

        # Agrupamento por problema
        analise_problema = self.df.groupby('DescricaoProblema').agg({
            'ValorCausa': ['count', 'mean', 'median'],
            'Atendida': lambda x: (x == 'S').sum(),
            'ValorCausaConfianca': 'mean'
        }).round(2)

        analise_problema.columns = ['Quantidade', 'Valor_Medio', 'Valor_Mediano',
                                   'Casos_Resolvidos', 'Confianca_Media']

        analise_problema['Taxa_Sucesso'] = (
            analise_problema['Casos_Resolvidos'] / analise_problema['Quantidade'] * 100
        ).round(1)

        analise_problema['Potencial_Financeiro'] = (
            analise_problema['Valor_Medio'] * analise_problema['Taxa_Sucesso'] / 100
        ).round(2)

        # Filtra problemas com volume razo√°vel
        analise_problema = analise_problema[analise_problema['Quantidade'] >= 5]
        analise_problema = analise_problema.sort_values('Potencial_Financeiro', ascending=False)

        print(f"üèÜ TOP {top_n} PROBLEMAS POR POTENCIAL FINANCEIRO:")
        print("-" * 120)

        for i, (problema, dados) in enumerate(analise_problema.head(top_n).iterrows(), 1):
            print(f"\n{i:2d}. {problema[:70]}...")
            print(f"    üìä Quantidade: {dados['Quantidade']:,}")
            print(f"    üí∞ Valor m√©dio: R$ {dados['Valor_Medio']:,.2f}")
            print(f"    ‚úÖ Taxa sucesso: {dados['Taxa_Sucesso']:.1f}%")
            print(f"    üéØ Potencial: R$ {dados['Potencial_Financeiro']:,.2f}")

        return analise_problema

    def analisar_distribui√ß√µes(self):
        """
        Analisa distribui√ß√µes das vari√°veis principais
        """
        print("\n" + "=" * 80)
        print("üìà AN√ÅLISE DE DISTRIBUI√á√ïES")
        print("=" * 80)

        # Distribui√ß√£o de valores
        print("üí∞ DISTRIBUI√á√ÉO DOS VALORES DE CAUSA:")
        quartis = self.df['ValorCausa'].quantile([0.25, 0.5, 0.75, 0.9, 0.95, 0.99])
        print(f"Q1 (25%): R$ {quartis[0.25]:,.2f}")
        print(f"Mediana (50%): R$ {quartis[0.5]:,.2f}")
        print(f"Q3 (75%): R$ {quartis[0.75]:,.2f}")
        print(f"P90: R$ {quartis[0.9]:,.2f}")
        print(f"P95: R$ {quartis[0.95]:,.2f}")
        print(f"P99: R$ {quartis[0.99]:,.2f}")

        # Faixas de valor
        faixas_valor = pd.cut(self.df['ValorCausa'],
                             bins=[0, 1000, 3000, 5000, 10000, 20000, float('inf')],
                             labels=['At√© R$ 1k', 'R$ 1k-3k', 'R$ 3k-5k',
                                   'R$ 5k-10k', 'R$ 10k-20k', 'Acima R$ 20k'])

        print(f"\nüìä DISTRIBUI√á√ÉO POR FAIXAS DE VALOR:")
        distribuicao_faixas = faixas_valor.value_counts().sort_index()
        for faixa, count in distribuicao_faixas.items():
            print(f"{faixa}: {count:,} ({count/len(self.df)*100:.1f}%)")

        # Distribui√ß√£o regional
        print(f"\nüó∫Ô∏è DISTRIBUI√á√ÉO POR REGI√ÉO:")
        dist_regional = self.df['Regiao'].value_counts()
        for regiao, count in dist_regional.items():
            print(f"{regiao}: {count:,} ({count/len(self.df)*100:.1f}%)")

        return {
            'quartis_valor': quartis,
            'distribuicao_faixas': distribuicao_faixas,
            'distribuicao_regional': dist_regional
        }

    def identificar_insights_preliminares(self):
        """
        Identifica insights preliminares para orientar a cria√ß√£o do target
        """
        print("\n" + "=" * 80)
        print("üí° INSIGHTS PRELIMINARES PARA CRIA√á√ÉO DO TARGET")
        print("=" * 80)

        insights = []

        # 1. Correla√ß√£o valor vs taxa de sucesso
        analise_valor_sucesso = self.df.groupby(
            pd.cut(self.df['ValorCausa'], bins=10)
        )['Atendida'].apply(lambda x: (x == 'S').mean()).round(3)

        print("1Ô∏è‚É£ CORRELA√á√ÉO VALOR vs TAXA DE SUCESSO:")
        for faixa, taxa in analise_valor_sucesso.items():
            print(f"   {faixa}: {taxa:.1%}")

        # 2. Regi√µes mais promissoras
        sucesso_por_regiao = self.df.groupby('Regiao').agg({
            'Atendida': lambda x: (x == 'S').mean(),
            'ValorCausa': 'mean'
        }).round(2)

        print(f"\n2Ô∏è‚É£ PERFORMANCE POR REGI√ÉO:")
        for regiao, dados in sucesso_por_regiao.iterrows():
            print(f"   {regiao}: {dados['Atendida']:.1%} sucesso, R$ {dados['ValorCausa']:,.2f} m√©dio")

        # 3. Identificar limites para classifica√ß√£o
        valor_medio = self.df['ValorCausa'].mean()
        taxa_sucesso_media = (self.df['Atendida'] == 'S').mean()

        print(f"\n3Ô∏è‚É£ M√âTRICAS DE REFER√äNCIA:")
        print(f"   Valor m√©dio: R$ {valor_medio:,.2f}")
        print(f"   Taxa sucesso m√©dia: {taxa_sucesso_media:.1%}")

        # 4. Proposta inicial de crit√©rios
        print(f"\n4Ô∏è‚É£ PROPOSTA INICIAL DE CRIT√âRIOS DE VIABILIDADE:")
        print(f"   üéØ VI√ÅVEL se:")
        print(f"     - Valor > R$ {valor_medio*0.8:,.2f} (80% da m√©dia) E")
        print(f"     - Taxa sucesso do assunto > {taxa_sucesso_media*0.9:.1%} (90% da m√©dia)")
        print(f"   ‚ùå N√ÉO VI√ÅVEL caso contr√°rio")

        insights.append({
            'valor_referencia': valor_medio * 0.8,
            'taxa_referencia': taxa_sucesso_media * 0.9,
            'valor_medio_geral': valor_medio,
            'taxa_media_geral': taxa_sucesso_media
        })

        return insights

    def executar_analise_completa(self):
        """
        Executa a an√°lise explorat√≥ria completa
        """
        print("üöÄ INICIANDO AN√ÅLISE EXPLORAT√ìRIA COMPLETA...")

        # 1. Definir problema
        self.definir_problema()

        # 2. An√°lise b√°sica
        stats_basicas = self.an√°lise_explorat√≥ria_b√°sica()

        # 3. An√°lise por assunto
        analise_assuntos = self.analisar_padr√µes_por_assunto()

        # 4. An√°lise por problema
        analise_problemas = self.analisar_padr√µes_por_problema()

        # 5. Distribui√ß√µes
        distribuicoes = self.analisar_distribui√ß√µes()

        # 6. Insights
        insights = self.identificar_insights_preliminares()

        print("\n" + "=" * 80)
        print("‚úÖ AN√ÅLISE EXPLORAT√ìRIA CONCLU√çDA!")
        print("=" * 80)

        print("üéØ PR√ìXIMOS PASSOS:")
        print("1. Criar vari√°vel target (viabilidade) baseada nos insights")
        print("2. Preparar features (text processing, encoding)")
        print("3. Dividir dados em treino/teste")
        print("4. Treinar modelos de classifica√ß√£o")
        print("5. Avaliar performance e calibrar")

        return {
            'stats_basicas': stats_basicas,
            'analise_assuntos': analise_assuntos,
            'analise_problemas': analise_problemas,
            'distribuicoes': distribuicoes,
            'insights': insights
        }


def executar_etapa_1(df_sindec_com_valores):
    """
    Executa a Etapa 1 da an√°lise
    """
    print("üéØ EXECUTANDO ETAPA 1: AN√ÅLISE EXPLORAT√ìRIA")
    print("=" * 80)

    # Inicializa analisador
    analyzer = ViabilidadeCausasAnalyzer(df_sindec_com_valores)

    # Executa an√°lise completa
    resultados = analyzer.executar_analise_completa()

    return analyzer, resultados